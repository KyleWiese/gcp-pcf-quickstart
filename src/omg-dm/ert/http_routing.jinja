{% set baseName = 'ert-' + env['deployment'] %}
{% set instanceGroupPrefix = baseName + '-inst' %}

resources:
#
# Ingress Rules
#
- name: {{ baseName }}-cf-public
  type: compute.v1.firewall
  properties:
    network: {{ properties['networkSelfLink'] }}
    allowed:
      - IPProtocol: tcp
        ports:
          - 80
    targetTags:
      - router

- name: {{ baseName }}-health-check
  type: compute.v1.firewall
  properties:
    network: {{ properties['networkSelfLink'] }}
    allowed:
      - IPProtocol: tcp
        ports:
          - 8080
    targetTags:
      - router
    sourceRanges:
      - 130.211.0.0/22
      - 35.191.0.0/16
#
# HTTP(s) Address
#

- name: cf-global-address
  type: compute.v1.globalAddress
  properties:
    name: {{ baseName }}-globalAddress

#
# Backend Services/Groups for HTTP(s)
#

- name: cf-http-routers-1
  type: compute.v1.instanceGroup
  properties:
    name: {{ instanceGroupPrefix }}-1
    zone: {{ properties['zone1'] }}

- name: cf-http-routers-2
  type: compute.v1.instanceGroup
  properties:
    name: {{ instanceGroupPrefix }}-2
    zone: {{ properties['zone2'] }}

- name: cf-http-routers-3
  type: compute.v1.instanceGroup
  properties:
    name: {{ instanceGroupPrefix }}-3
    zone: {{ properties['zone3'] }}

- name: cf-http-health-check
  type: compute.v1.httpHealthCheck
  properties:
    name: {{ baseName }}-healthCheck
    port: 8080
    requestPath: /health
    checkIntervalSec: 5
    timeoutSec: 3
    healthyThreshold: 6
    unhealthyThreshold: 3

- name: cf-http-backend
  type: compute.v1.backendService
  properties:
    name: {{ backendName }}
    backends:
      - group: $(ref.cf-http-routers-1.selfLink)
      - group: $(ref.cf-http-routers-2.selfLink)
      - group: $(ref.cf-http-routers-3.selfLink)
    healthChecks:
      - $(ref.cf-http-health-check.selfLink)

- name: cf-http-url-map
  type: compute.v1.urlMap
  properties:
    name: {{ baseName }}-urlMap
    defaultService: $(ref.cf-http-backend.selfLink)

#
# HTTP Frontend
#

- name: cf-http-proxy
  type: compute.v1.targetHttpProxy
  properties:
    name: {{ baseName }}-httpProxy
    urlMap: $(ref.cf-http-url-map.selfLink)

- name: {{ baseName }}-http-forwarding-rule
  type: compute.v1.globalForwardingRule
  properties:
    IPAddress: $(ref.cf-global-address.address) 
    target: $(ref.cf-http-proxy.selfLink)
    portRange: 80

#
# HTTPS
#

- name: cf-ssl-cert
  type: ssl.py
  properties:
    sslPrivateKeyPath: {{ properties['sslPrivateKeyPath'] }}
    sslCertificatePath: {{ properties['sslCertificatePath'] }}

- name: cf-https-proxy
  type: compute.v1.targetHttpsProxy
  properties:
    name: {{ baseName }}-httpsProxy
    urlMap: $(ref.cf-http-url-map.selfLink)
    sslCertificates:
    - $(ref.cf-ssl-cert.link)

- name: {{ baseName }}-https-forwarding-rule
  type: compute.v1.globalForwardingRule
  properties:
    IPAddress: $(ref.cf-global-address.address) 
    target: $(ref.cf-https-proxy.selfLink)
    portRange: 443

outputs:
- name: httpLoadBalancerIP
  value: $(ref.cf-global-address.address)
- name: httpBackendServiceName
  value: $(ref.cf-http-backend.name)
- name: sslCertificate
  value: $(ref.cf-ssl-cert.certificate)
- name: sslPrivateKey
  value: $(ref.cf-ssl-cert.privateKey)